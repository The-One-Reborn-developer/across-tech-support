from aiogram.types import (InlineKeyboardButton,
                           InlineKeyboardMarkup)


def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üìû',
                    callback_data='contacts'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üìù',
                    callback_data='make_request'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ üîé',
                    callback_data='request_status'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì',
                    callback_data='faq'
                )
            ]
        ]
    )


def back_to_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                    callback_data='main'
                )
            ]
        ]
    )


def confirmation_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ü–æ–Ω—è—Ç–Ω–æ üëç',
                    callback_data='further'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                    callback_data='main'
                )
            ]
        ]
    )


def found_user_confirmation_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ü–æ–Ω—è—Ç–Ω–æ üëçüëç',
                    callback_data='found_user_further'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                    callback_data='main'
                )
            ]
        ]
    )


def region_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å üá∑üá∫',
                    callback_data='Belgorod'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                    callback_data='main'
                )
            ]
        ]
    )


def medical_organization_keyboard() -> InlineKeyboardMarkup:
    with open('medical_organizations.txt', 'r') as f:
        medical_organizations = f.read().split('\n')
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=organization,
                    callback_data=str(organization)
                )
            ]
            for organization in medical_organizations
        ]
        + [[
            InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                callback_data='main'
            )
        ]]
    )


def issue_type_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –õ–ò–°',
                    callback_data='critical'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–µ—Ç –æ–±–º–µ–Ω–∞ —Å –ú–ò–°',
                    callback_data='no_exchange'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–µ—Ç —Å–≤—è–∑–∏ —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏',
                    callback_data='no_connection'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–î—Ä—É–≥–æ–µ',
                    callback_data='other'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                    callback_data='main'
                )
            ]
        ]
    )


def tickets_keyboard(ticket_ids: list) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f'üîç {ticket_id}',
                    callback_data=str(ticket_id)
                )
            ]
            for ticket_id in ticket_ids
        ]
        + [[
            InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                callback_data='main'
            )
        ]]
    )


def add_ticket_info_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞ ‚úÖ',
                    callback_data='add_ticket_info'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–µ—Ç ‚ùé',
                    callback_data='main'
                )
            ]
        ]
    )


def yes_no_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞ ‚úÖ',
                    callback_data='yes_create_ticket'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                    callback_data='main'
                )
            ]
        ]
    )


def first_media_yes_no_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞ ‚úÖ',
                    callback_data='first_media_yes'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–µ—Ç ‚ùé\n–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å 1 —Ñ–∞–π–ª–æ–º üì∏',
                    callback_data='first_media_no'
                )
            ]
        ]
    )


def second_media_yes_no_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞ ‚úÖ',
                    callback_data='second_media_yes'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–µ—Ç ‚ùé\n–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å 2 —Ñ–∞–π–ª–∞–º–∏ üì∏',
                    callback_data='second_media_no'
                )
            ]
        ]
    )


def third_media_yes_no_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞ ‚úÖ',
                    callback_data='third_media_yes'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–µ—Ç ‚ùé\n–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å 3 —Ñ–∞–π–ª–∞–º–∏ üì∏',
                    callback_data='third_media_no'
                )
            ]
        ]
    )


def fourth_media_yes_no_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞ ‚úÖ',
                    callback_data='fourth_media_yes'
                )
            ],
            [
                InlineKeyboardButton(
                    text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                    callback_data='main'
                )
            ]
        ]
    )


def articles_keyboard() -> InlineKeyboardMarkup:
    articles_id = []
    articles_title = []

    with open('app/files/articles_data.txt', 'r', encoding='utf-8') as file:
        for line in file:
            # Ensure the line contains a comma to split
            if ',' in line:
                article_id, article_title = line.split(',', 1)  # Split only once in case the title contains commas
                article_title = article_title.strip()

                articles_id.append(article_id)
                articles_title.append(article_title)

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=article_title,
                    callback_data=str(article_id)
                )
            ]
            for article_id, article_title in zip(articles_id, articles_title)
        ]
        + [[
            InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
                callback_data='main'
            )
        ]]
    )