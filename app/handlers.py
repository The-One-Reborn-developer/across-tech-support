from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F

import app.keyboards as keyboards
import app.database.requests as requests
import app.send_request as send_request

router = Router()

class Request(StatesGroup):
    region = State()
    medical_organization = State()
    name = State()
    position = State()
    phone = State()
    request_type = State()
    request_description = State()


@router.message(CommandStart())
async def start(message: Message) -> None:
    await requests.set_user(message.from_user.id)

    content = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n" \
              f"–Ø - –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ê–∫—Ä–æ—Å—Å.\n" \
              f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üîΩ"
              
    await message.answer(content, reply_markup=keyboards.main_keyboard())


@router.callback_query(F.data == "main")
async def main(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()

    content = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üîΩ"
              
    await callback.message.edit_text(content,
                                     reply_markup=keyboards.main_keyboard())


@router.callback_query(F.data == "contacts")
async def contacts(callback: CallbackQuery) -> None:
    content = "–¢–µ–ª–µ—Ñ–æ–Ω —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: +78007070572 \n" \
              "–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: support@across.ru"
    
    await callback.message.edit_text(content,
                                     reply_markup=keyboards.back_to_main_keyboard())


@router.callback_query(F.data == "make_request")
async def make_request(callback: CallbackQuery, state: FSMContext) -> None:
    content = "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n–ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É " \
              "–Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π " \
              "–∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ " \
              "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å <b>–¢–û–õ–¨–ö–û</b> –ø–∏—Å—å–º–æ–º –Ω–∞ –ø–æ—á—Ç—É " \
              "support@across.ru"
    
    user_data = await requests.get_user(callback.from_user.id)

    if user_data[0] and user_data[1] and user_data[2] and user_data[3] and user_data[4]:
        await callback.message.edit_text(content, parse_mode="HTML",
                                     reply_markup=keyboards.found_user_confirmation_keyboard())
    else:
        await callback.message.edit_text(content, parse_mode="HTML",
                                     reply_markup=keyboards.confirmation_keyboard())


@router.callback_query(F.data == "further")
async def futher(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Request.region)

    content = "–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–µ–≥–∏–æ–Ω üåçüåéüåè –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–Ω–∏–∑—É üîΩ"

    await callback.message.edit_text(content,
                                     parse_mode="HTML",
                                     reply_markup=keyboards.region_keyboard())


@router.callback_query(Request.region)
async def region_state(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data({"region": callback.data})
    await requests.update_user(callback.from_user.id, region=callback.data)
    await state.set_state(Request.medical_organization)

    content = "–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é üè•"

    await callback.message.answer(content,
                                  reply_markup=keyboards.medical_organization_keyboard())


@router.callback_query(Request.medical_organization)
async def organization(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data({"medical_organization": str(callback.data)})
    await requests.update_user(callback.from_user.id, medical_organization=callback.data)
    await state.set_state(Request.name)

    content = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –§–ò–û üõÇ"

    await callback.message.answer(content,
                                  reply_markup=keyboards.back_to_main_keyboard())


@router.message(Request.name)
async def name(message: Message, state: FSMContext) -> None:
    await state.update_data({"name": message.text})
    await requests.update_user(message.from_user.id, name=message.text)
    await state.set_state(Request.position)

    content = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å üë®‚Äç‚öïÔ∏èüë©‚Äç‚öïÔ∏è"

    await message.answer(content,
                         reply_markup=keyboards.back_to_main_keyboard())


@router.message(Request.position)
async def position(message: Message, state: FSMContext) -> None:
    await state.update_data({"position": message.text})
    await requests.update_user(message.from_user.id, position=message.text)
    await state.set_state(Request.phone)

    content = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω üì±"

    await message.answer(content,
                         reply_markup=keyboards.back_to_main_keyboard())


@router.message(Request.phone)
async def phone(message: Message, state: FSMContext) -> None:
    if len(message.text) != 11:
        content = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üö´"

        return await message.answer(content)
    else:
        await state.update_data({"phone": message.text})
        await requests.update_user(message.from_user.id, phone=message.text)
        await state.set_state(Request.request_type)

        content = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ üìù"

        await message.answer(content,
                             reply_markup=keyboards.issue_type_keyboard())
        

@router.callback_query(F.data == "found_user_further")
async def found_user_further(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Request.request_type)

    content = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ üìù"

    await callback.message.edit_text(content,
                                     reply_markup=keyboards.issue_type_keyboard())


@router.callback_query(Request.request_type)
async def request_type(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data({"request_type": callback.data})
    await state.set_state(Request.request_description)

    if callback.data == "critical":
        content = "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É üìù"
    elif callback.data == "no_exchange":
        content = "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É üìù –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –®–ö –õ–ò–° –∏–ª–∏ –ò–î–ú–ò–°"
    elif callback.data == "no_connection":
        content = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞, –®–ö –õ–ò–° –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ " \
                  "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã üìù"
    elif callback.data == "other":
        content = "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É üìù"
        
    await callback.message.answer(content,
                                  reply_markup=keyboards.back_to_main_keyboard())


@router.message(Request.request_description)
async def request_description(message: Message, state: FSMContext) -> None:
    message_content = message.photo if message.photo else message.text
    await state.update_data({"request_description": message_content})

    content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ"

    user_data = await requests.get_user(message.from_user.id)
    fsm_user_data = await state.get_data()

    await send_request.send_request(user_data[0],
                                user_data[1],
                                user_data[2],
                                user_data[3],
                                user_data[4],
                                fsm_user_data["request_type"],
                                fsm_user_data["request_description"])

    await state.clear()

    await message.answer(content,
                         reply_markup=keyboards.back_to_main_keyboard())


@router.callback_query(F.data == "request_status")
async def request_status(callback: CallbackQuery) -> None:
    content = "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üôÅ"

    await callback.message.edit_text(content,
                                     reply_markup=keyboards.back_to_main_keyboard())


@router.callback_query(F.data == "faq")
async def faq(callback: CallbackQuery) -> None:
    content = "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üôÅ"

    await callback.message.edit_text(content,
                                     reply_markup=keyboards.back_to_main_keyboard())